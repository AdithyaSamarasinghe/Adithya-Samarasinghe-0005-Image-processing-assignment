# -*- coding: utf-8 -*-
"""Copy of Assignment .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19wVfrqAK6T5BPg_Wghr9XAgS-njfghwU

Question 1
"""

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
margot_golden_gray= cv.imread('/content/drive/MyDrive/assignment_01_images/margot_golden_gray.jpg' ,cv.IMREAD_REDUCED_COLOR_2)
assert margot_golden_gray is not None
margot_golden_gray = cv.cvtColor(margot_golden_gray, cv.COLOR_BGR2RGB)
t = np.zeros(256, dtype=np.uint8)
t[0:50] = np.array( [int(x*200/255) for x in range (50)])
t[50:151] = np.array( [int (x*200/255 + 50) for x in range (50, 151)])
t[151:256] = np.array([int (x*200/255) for x in range(151, 256)])
im2 = t[margot_golden_gray]



fig, ax = plt.subplots(1, 2, figsize = (10, 10))
ax[0].imshow(margot_golden_gray, vmin=0, vmax=255, cmap = 'gray')
ax[0].set_title('original')
ax[1].imshow(im2, vmin=0, vmax=255, cmap = 'gray')
ax[1].set_title('intensity transformed')
plt.show()

"""Question 2

a)
"""

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
highlights_and_shadows= cv.imread('/content/drive/MyDrive/assignment_01_images/highlights_and_shadows.jpg')
assert highlights_and_shadows is not None
highlights_and_shadows = cv.cvtColor(highlights_and_shadows, cv.COLOR_BGR2RGB)

lab_image = cv.cvtColor(highlights_and_shadows, cv.COLOR_RGB2LAB)
L_plane = lab_image[:, :, 0]
gamma = 2
corrected_L_plane = np.power((L_plane / 255), gamma)* 255
lab_image[:, :, 0] = corrected_L_plane.astype(np.uint8)
gamma_corrected_image = cv.cvtColor(lab_image, cv.COLOR_LAB2RGB)
fig, ax = plt.subplots(1, 2, figsize=(10, 5))


ax[0].imshow(highlights_and_shadows)
ax[0].set_title('Original Image')

ax[1].imshow(gamma_corrected_image)
ax[1].set_title('gamma corrected L plane')
plt.show()

"""b)"""

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
highlights_and_shadows= cv.imread('/content/drive/MyDrive/assignment_01_images/highlights_and_shadows.jpg')
assert highlights_and_shadows is not None
highlights_and_shadows = cv.cvtColor(highlights_and_shadows, cv.COLOR_BGR2RGB)

lab_image = cv.cvtColor(highlights_and_shadows, cv.COLOR_RGB2LAB)
L_plane = lab_image[:, :, 0]
gamma = 2
corrected_L_plane = np.power((L_plane / 255), gamma)* 255
lab_image[:, :, 0] = corrected_L_plane.astype(np.uint8)
gamma_corrected_image = cv.cvtColor(lab_image, cv.COLOR_LAB2RGB)
fig, axarr = plt.subplots(3, 2, figsize=(10, 5))
color = ('b', 'g', 'r')
for i, c in enumerate(color):
  hist_orig = cv.calcHist([highlights_and_shadows], [i], None, [256], [0,256])
  axarr[1,0].plot(hist_orig, color = c)
  hist_gamma = cv.calcHist([gamma_corrected_image], [i], None, [256], [0,256])
  axarr[1,1].plot(hist_gamma, color = c)
table = np.array([(i/255.0)**(gamma)*255.0 for i in np.arange(0,256)]).astype('uint8')
axarr[0,0].imshow(highlights_and_shadows)
axarr[0,0].set_title('Original Image')
axarr[0,1].imshow(gamma_corrected_image)
axarr[0,1].set_title('gamma corrected L plane')
axarr[2,0].plot(table)
axarr[2,0].set_xlim(0, 255)
axarr[2,0].set_ylim(0, 255)
axarr[2,0].set_aspect('equal')
plt.show()

"""Question 3

a)
"""

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
spider= cv.imread('/content/drive/MyDrive/assignment_01_images/spider.png')
assert spider is not None
spider2 = cv.cvtColor(spider, cv.COLOR_BGR2RGB)
spider = cv.cvtColor(spider, cv.COLOR_BGR2HSV)

hue, saturation, value = cv.split(spider)
fig, ax = plt.subplots(1, 4, figsize = (15, 5))

ax[0].imshow(spider2)
ax[0].set_title('original image')

ax[1].imshow(hue)
ax[1].set_title('hue plane')

ax[2].imshow(saturation)
ax[2].set_title('saturation plane')

ax[3].imshow(value)
ax[3].set_title('value plane')

plt.show()

"""**b**)"""

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
spider= cv.imread('/content/drive/MyDrive/assignment_01_images/spider.png')
assert spider is not None
spider = cv.cvtColor(spider, cv.COLOR_BGR2HSV)
hue, saturation, value = cv.split(spider)

a=0.5
sigma=70
intensity_transformed = np.minimum(saturation+a*128*np.exp(-(saturation-128)**2/(2*sigma*2)),255).astype(np.uint8)
hsv_transformed=cv.merge([hue,intensity_transformed,value])
image_transformed=cv.cvtColor(hsv_transformed,cv.COLOR_HSV2RGB)
fig, ax = plt.subplots(1,5, figsize = (15, 5) )
x = np.arange(0, 256)
transformation = np.minimum(x+a*128*np.exp(-(x-128)**2/(2*sigma**2)), 255)

ax[0].imshow(intensity_transformed, vmin=0, vmax=255)
ax[0].set_title('intensity_transformed saturation')
ax[1].imshow(hsv_transformed, vmin=0, vmax=255)
ax[1].set_title('hsv_transformed')
ax[2].imshow(image_transformed, vmin=0, vmax=255)
ax[2].set_title('vibrance enhanced')
ax[3].imshow(spider2, vmin=0, vmax=255)
ax[3].set_title('original image')
ax[4].plot(x, transformation, color='blue')
ax[4].set_title('Intensity Transformation')
ax[4].set_xlabel('Input Intensity (x)')
ax[4].set_ylabel('Output Intensity')
ax[4].set_xlim([0, 255])
ax[4].set_ylim([0, 255])

plt.tight_layout()
plt.show()

"""Question 4"""

import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
shells= cv.imread('/content/drive/MyDrive/assignment_01_images/shells.tif',cv.IMREAD_GRAYSCALE)
assert shells is not None





h = cv.calcHist([shells],[0], None, [256], [0, 256])
plt.bar(range(256), h.ravel())
plt.show()
im2 = cv.equalizeHist(shells)
h = cv.calcHist([im2],[0], None, [256], [0, 256])
plt.bar(range(256), h.ravel())
#plt.show()

fig, ax = plt.subplots(1,2)
ax[0].imshow(shells, cmap='gray')
ax[1].imshow(im2, cmap='gray')
plt.show()

"""Question 5

a)
"""

#Preprocess the image 5a to remove noise.
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
import cv2 as cv
import matplotlib.pyplot as plt
import numpy as np

rice_gaussian_noise = cv.imread('/content/drive/MyDrive/assignment_01_images/rice_gaussian_noise.png',cv.IMREAD_GRAYSCALE)
rice_salt_pepper_noise = cv.imread('/content/drive/MyDrive/assignment_01_images/rice_salt_pepper_noise.png',cv.IMREAD_GRAYSCALE)

if rice_gaussian_noise is None or rice_salt_pepper_noise is None:
    print('images are ok')
else:
    print('error')

#ret1, th1 = cv.threshold(rice_gaussian_noise, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)
#ret2, th2 = cv.threshold(rice_salt_pepper_noise, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)

kernel1 = np.ones((2,2), np.uint8)
opening1 = cv.morphologyEx(rice_gaussian_noise, cv.MORPH_OPEN, kernel1)
opening2 = cv.morphologyEx(rice_salt_pepper_noise, cv.MORPH_OPEN, kernel1)
kernel2 = np.ones((3,3), np.uint8)
closing1 = cv.morphologyEx(opening1, cv.MORPH_CLOSE, kernel2)
closing2 = cv.morphologyEx(opening2, cv.MORPH_CLOSE, kernel2)


images = [rice_gaussian_noise,  closing1, rice_salt_pepper_noise,  closing2]
titles = ['Original image',  'after applying morphological method',
          'Original image', 'after applying morphological method']

plt.figure(figsize=(10, 8))
for i in range(4):
    plt.subplot(2, 2, i + 1)
    plt.imshow(images[i], 'gray')
    plt.title(titles[i])
    plt.xticks([]), plt.yticks([])
plt.show()

import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
import cv2 as cv
import matplotlib.pyplot as plt
import numpy as np

rice_gaussian_noise = cv.imread('/content/drive/MyDrive/assignment_01_images/rice_gaussian_noise.png',cv.IMREAD_GRAYSCALE)
rice_salt_pepper_noise = cv.imread('/content/drive/MyDrive/assignment_01_images/rice_salt_pepper_noise.png',cv.IMREAD_GRAYSCALE)

if rice_gaussian_noise is None or rice_salt_pepper_noise is None:
    print("Error: Unable to read one or both images")
else:
    print("Images were read successfully")
kernel1= np.ones((2,2),np.uint8)
opening1 = cv.morphologyEx(rice_gaussian_noise, cv.MORPH_OPEN, kernel1)
opening2 = cv.morphologyEx(rice_salt_pepper_noise, cv.MORPH_OPEN, kernel1)
kernel2 = np.ones((3,3),np.uint8)
closing1 = cv.morphologyEx(opening1, cv.MORPH_CLOSE, kernel2)
closing2 = cv.morphologyEx(opening2, cv.MORPH_CLOSE, kernel2)

num_labels1, labeled_img1= cv.connectedComponents(closing1, None, 8, cv.CV_32S)
num_labels2, labeled_img2 = cv.connectedComponents(closing2, None, 8, cv.CV_32S)
print("Number of connected components1:", num_labels1)
print("Number of connected components2:", num_labels2)

images = [rice_gaussian_noise, closing1,
          rice_salt_pepper_noise, closing1]

titles = ['Original Noisy Image 1', "Removed objects",
          'Original Noisy Image 2', "Removed objects"]

plt.figure(figsize=(10, 8))
for i in range(4):
    plt.subplot(2, 2, i+1)
    plt.imshow(images[i], 'gray')
    plt.title(titles[i])
    plt.xticks([]), plt.yticks([])

plt.show()

"""Question 6"""

import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
import cv2 as cv
import matplotlib.pyplot as plt
import numpy as np
from scipy import datasets,ndimage

einstein = cv.imread('/content/drive/MyDrive/assignment_01_images/einstein.png',cv.IMREAD_GRAYSCALE)
einstein is not  None

ascent = datasets.ascent().astype('int32')
sobel_h = ndimage.sobel(einstein, axis=0)  # horizontal gradient
sobel_v = ndimage.sobel(einstein, axis=1)  # vertical gradient
magnitude = np.sqrt(sobel_h*2 + sobel_v*2)
magnitude *= 255.0 / np.max(magnitude)  # normalization

fig, axs = plt.subplots(2, 2, figsize=(8, 8))
plt.gray()  # show the filtered result in grayscale
axs[0, 0].imshow(einstein)
axs[0, 1].imshow(sobel_h)
axs[1, 0].imshow(sobel_v)
axs[1, 1].imshow(magnitude)
titles = ["original", "horizontal", "vertical", "magnitude"]
for i, ax in enumerate(axs.ravel()):
    ax.set_title(titles[i])
    ax.axis("off")
plt.show()

kernel=np.array([(1,0,-1),(2,0,-2),(1,0,-1)],dtype='float')
image=cv.filter2D(img,-1,kernel)
fig,axes=plt.subplots(1,2,sharex='all',sharey='all',figsize=(5,5))
axes[0].imshow(img,cmap='gray')
axes[0].set_title('original')
axes[0].set_xticks([]),axes[0].set_yticks([])
axes[1].imshow(image,cmap='gray')
axes[1].set_title('Sobel Horizontal')
axes[1].set_xticks([]),axes[1].set_yticks([])
plt.show()

"""Question 7

a)
"""

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
im01= cv.imread('/content/drive/MyDrive/assignment_01_images/a1q5images/im01.png',cv.IMREAD_REDUCED_GRAYSCALE_2)
assert im01 is not None

scale = 0.5
rows = int(scale*im01.shape[0])
cols = int(scale*im01.shape[1])

zoomed = np.zeros((rows,cols),dtype=im01.dtype)
for i in range (0, rows):
  for j in range (0, cols):
    zoomed[i, j] = im01[int(i/scale), int(j/scale)]

fig, ax = plt.subplots(1, 2, figsize=(10, 5))


ax[0].imshow(im01)
ax[0].set_title('Original Image')

ax[1].imshow(zoomed)
ax[1].set_title('zoomed, nearest neighbour')
plt.show()

"""b)

"""

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
im01= cv.imread('/content/drive/MyDrive/assignment_01_images/a1q5images/im01.png',cv.IMREAD_REDUCED_GRAYSCALE_2)
assert im01 is not None

scale = 0.5
rows = int(scale*im01.shape[0])
cols = int(scale*im01.shape[1])

zoomed = np.zeros((rows,cols),dtype=im01.dtype)
for i in range (0, rows):
  for j in range (0, cols):
    x = i/ scale
    y = j / scale
    x1, y1 = int(x), int(y)
    x2, y2 = min(x1+1, im01.shape[0] -1), min(y1+1, im01.shape[1]-1)
    weight_x = x-x1
    weight_y = y-y1

    zoomed[i, j] = (1 - weight_x)*(1-weight_y)*im01[x1,y1]+ weight_x*(1-weight_y)*im01[x2,y1]+ (1-weight_x)*weight_y*im01[x1,y2]+weight_x*weight_y*im01[x2,y2
                                                                                                                                                      ]
fig, ax = plt.subplots(1, 2, figsize=(10, 5))


ax[0].imshow(im01)
ax[0].set_title('Original Image')

ax[1].imshow(zoomed)
ax[1].set_title('zoomed, Bilenear Interpolation')
plt.show()

"""Question 8

a)
"""

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
daisy= cv.imread('/content/drive/MyDrive/assignment_01_images/daisy.jpg')

assert daisy is not None

mask = np.zeros(daisy.shape[:2],np.uint8)
bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)
rect = (30,150,539,400)
cv.grabCut(daisy,mask,rect,bgdModel,fgdModel,5,cv.GC_INIT_WITH_RECT)
forground = np.where((mask==0)|(mask==2),0,1).astype('uint8')
background = np.where((mask==0)|(mask==2),1,0).astype('uint8')
blurred_background=cv.blur(src=daisy, ksize=(40, 40))

img1 = daisy*forground[:,:,np.newaxis]
img2 = daisy*background[:,:,np.newaxis]
img3 = blurred_background*background[:,:,np.newaxis]
img4 = cv.add(img3,img1)

images = [forground, cv.cvtColor(img1,cv.COLOR_BGR2RGB) ,cv.cvtColor(img2,cv.COLOR_BGR2RGB),
          cv.cvtColor(img4,cv.COLOR_BGR2RGB), cv.cvtColor(daisy,cv.COLOR_BGR2RGB),]

titles = ['Final Segment Mask', "Forground Image",
          'Background image', "Background Blurred image",'Original image']

plt.figure(figsize=(10, 8))
for i in range(5):
    plt.subplot(2, 3, i+1)
    plt.imshow(images[i], 'gray')
    plt.title(titles[i])
    plt.xticks([]), plt.yticks([])
plt.show()
plt.imshow(cv.cvtColor(blurred_background,cv.COLOR_BGR2RGB))